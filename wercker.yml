# This references the default golang container from
# the Docker Hub: https://registry.hub.docker.com/u/library/golang/
# If you want Google's container you would reference google/golang
# Read more about containers on our dev center
# https://devcenter.wercker.com/overview-and-core-concepts/containers/
box: golang
# This is the build pipeline. Pipelines are the core of wercker
# Read more about pipelines on our dev center
# https://devcenter.wercker.com/development/pipelines/

# You can also use services such as databases. Read more on our dev center:
# https://devcenter.wercker.com/administration/services/
# services:
    # - postgres
    # https://devcenter.wercker.com/administration/services/examples/postgresql/

    # - mongo
    # https://devcenter.wercker.com/administration/services/examples/mongodb/
build:
  # The steps that will be executed on build
  # Steps make up the actions in your pipeline
  # Read more about steps on our dev center:
  # https://devcenter.wercker.com/development/steps/
  steps:
    # Sets the go workspace and places you package
    # at the right place in the workspace tree
    - setup-go-workspace

    # Gets the dependencies
    - script:
        name: go get
        code: |
          go get

    # Build the project
    - script:
        name: go build
        code: |
          go build ./...

    # Test the project
    - script:
        name: go test
        code: |
          go test ./...
ecr-push:
  box: golang
  steps:
    # - internal/docker-push:
    #    username: $DOCKER_HUB_USER
    #    password: $DOCKER_HUB_PASS
    #    tag: latest
    #    repository: domiemon/go-web-system
    - internal/docker-build:
      dockerfile: Dockerfile
      image-name: go-web-system
    - internal/docker-push:
      aws-access-key: $X_AWS_ACCESS_KEY_ID
      aws-secret-key: $X_AWS_SECRET_ACCESS_KEY
      aws-region: $X_AWS_REGION
      aws-registry-id: $X_AWS_REGISTRY_ID
      aws-registry-url: $X_AWS_REGISTRY_URL
      repository: go-web-system
      tag: $WERCKER_GIT_BRANCH
deploy:
  box: python:2.7-slim
  steps:
    - script:
      name: run deploy
      code: |
        pwd && ls && chmod 0777 test_run.sh && /bin/bash test_run.sh
    #- deploy/aws-ecs:
    #  key: $X_AWS_ACCESS_KEY_ID
    #  secret: $X_AWS_SECRET_ACCESS_KEY
    #  cluster-name: go-web-wercker-demo-cluster
    #  service-name: go_web_wercker_demo_service4
    #  task-definition-name: go-web-wercker-demo-task-definition
    #  task-definition-file: $WERCKER_SOURCE_DIR/go-web-wercker-demo-task-definition.json